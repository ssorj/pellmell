# -*- mode: python -*-

router_config_template = """
router {{
    mode: standalone
    id: quiver-test-router
}}

listener {{
    host: {}
    port: {}
    linkCapacity: 1000
    authenticatePeer: off
    saslMechanisms: ANONYMOUS
}}
"""

router_host = "localhost"
router_port = 45672
router_config = router_config_template.format(router_host, router_port)
router_config_file = write(make_temp_file(), router_config)

transfers_file = make_temp_file()

duration_arg = CommandArgument("duration", default=10, positional=False,
                               help="The time to run (excluding warmup) in seconds")
warmup_arg = CommandArgument("warmup", default=10, positional=False,
                             help="Warmup time in seconds")
pairs_arg = CommandArgument("pairs", default=2, positional=False,
                            help="The number of sender/receiver pairs")

standard_args = (duration_arg, warmup_arg, pairs_arg)

@command
def clean(app):
    remove("pellmell")
    remove("perf.data")
    remove("perf.data.old")
    remove("flamegraph.html")
    remove("flamegraph.html.old")

@command
def check(app):
    check_program("gcc", "I can't find gcc.  Run 'dnf install gcc'.")
    check_program("perf", "I can't find the perf tools.  Run 'dnf install perf'.")
    check_program("pidstat", "I can't find pidstat.  Run 'dnf install sysstat'.")
    check_program("skrouterd", "I can't find skrouterd.  Make sure it is on the path")

    perf_event_paranoid = read("/proc/sys/kernel/perf_event_paranoid")

    if perf_event_paranoid != "-1\n":
        exit("Perf events are not enabled.  Run 'echo -1 > /proc/sys/kernel/perf_event_paranoid' as root.")

@command
def build(app):
    check(app)
    run("gcc pellmell.c -o pellmell -g -O2 -std=c99 -fno-omit-frame-pointer -lqpid-proton -lqpid-proton-proactor")

def outer(inner, pairs):
    client_procs = list()
    transfers_files = list()

    with start(f"skrouterd --config {router_config_file}") as router:
        await_port(45672)

        for i in range(pairs):
            transfers = make_temp_file()
            transfers_files.append(transfers)

            client_procs.append(start("./pellmell receive", stdout=transfers))
            client_procs.append(start("./pellmell send"))

        try:
            inner(router)
        finally:
            for proc in client_procs:
                kill(proc)

        for file in transfers_files:
            append(transfers_file, read(file))

@command(args=standard_args)
def stat(app, duration=10, warmup=10, pairs=2):
    build(app)

    def inner(router):
        with start(f"pidstat 2 --human -t -p {router.pid}"):
            sleep(warmup)
            run(f"perf stat --detailed -p {router.pid} sleep {duration}")

    outer(inner, pairs)

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // warmup + duration, "<<")

@command(args=standard_args)
def flamegraph(app, duration=10, warmup=10, pairs=2):
    build(app)

    def inner(router):
        sleep(warmup)

        if exists("flamegraph.html"):
            move("flamegraph.html", "flamegraph.html.old")

        run(f"perf script flamegraph -F 99 --call-graph dwarf -p {router.pid} sleep {duration}")

    outer(inner, pairs)

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // (warmup + duration), "<<")

@command(args=standard_args)
def record(app, duration=10, warmup=10, pairs=2):
    build(app)

    def inner(router):
        sleep(warmup)
        run(f"perf record -F 99 --call-graph dwarf -p {router.pid} sleep {duration}")

    outer(inner, pairs)

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // (warmup + duration), "<<")

@command
def self_test(app):
    flamegraph(app, duration=0.1, warmup=0.1)
    stat(app, duration=0.1, warmup=0.1)
    record(app, duration=0.1, warmup=0.1)
    clean(app)
