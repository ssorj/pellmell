config_template = """
router {{
    mode: standalone
    id: quiver-test-router
}}

listener {{
    host: {}
    port: {}
    linkCapacity: 1000
    authenticatePeer: off
    saslMechanisms: ANONYMOUS
}}
"""

@command
def check(app):
    check_program("gcc", "I can't find gcc.  Run 'dnf install gcc'.")
    check_program("perf", "I can't find the perf tools.  Run 'dnf install perf'.")
    check_program("pidstat", "I can't find pidstat.  Run 'dnf install sysstat'.")
    check_program("skrouterd", "I can't find skrouterd.  Make sure it is on the path")

    perf_event_paranoid = read("/proc/sys/kernel/perf_event_paranoid")

    if perf_event_paranoid != "-1\n":
        exit("Perf events are not enabled.  Run 'echo -1 > /proc/sys/kernel/perf_event_paranoid' as root.")

@command
def build(app):
    run("gcc pellmell.c -o pellmell -g -O2 -std=c99 -fno-omit-frame-pointer -lqpid-proton -lqpid-proton-proactor")

@command
def clean(app):
    remove("pellmell")
    remove("perf.data")
    remove("perf.data.old")
    remove("flamegraph.html")
    remove("flamegraph.html.old")

host = "localhost"
port = 45672
config = config_template.format(host, port)
config_file = write(make_temp_file(), config)
transfers_file = make_temp_file()

@command
def run_(app):
    check(app)
    build(app)

    with start(f"skrouterd --config {config_file}") as router:
        with start(f"pidstat 2 --human -t -p {router.pid}"):
            await_port(45672)

            with start("./pellmell receive", stdout=transfers_file):
                with start("./pellmell send"):
                    sleep(20)

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // 20, "<<")

@command
def flamegraph(app):
    check(app)
    build(app)

    with start(f"skrouterd --config {config_file}") as router:
        await_port(45672)

        with start("./pellmell receive", stdout=transfers_file):
            with start("./pellmell send"):
                sleep(10)

                if exists("flamegraph.html"):
                    move("flamegraph.html", "flamegraph.html.old")

                run(f"perf script flamegraph -F 99 --call-graph dwarf -p {router.pid} sleep 10")

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // 20, "<<")

@command
def stat(app):
    check(app)
    build(app)

    with start(f"skrouterd --config {config_file}") as router:
        await_port(45672)

        with start("./pellmell receive", stdout=transfers_file):
            with start("./pellmell send"):
                sleep(10)
                run(f"perf stat --detailed -p {router.pid} sleep 10")

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // 20, "<<")

@command
def record(app):
    check(app)
    build(app)

    with start(f"skrouterd --config {config_file}") as router:
        await_port(45672)

        with start("./pellmell receive", stdout=transfers_file):
            with start("./pellmell send"):
                sleep(10)
                run(f"perf record -F 99 --call-graph dwarf -p {router.pid} sleep 10")

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // 20, "<<")

@command
def stat(app):
    check(app)
    build(app)

    with start(f"skrouterd --config {config_file}") as router:
        await_port(45672)

        with start("./pellmell receive", stdout=transfers_file):
            with start("./pellmell send"):
                sleep(10)
                run(f"perf stat -d -p {router.pid} sleep 10")

    count = int(call(f"wc -l {transfers_file}").split()[0])
    print(">>", count // 20, "<<")
